{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 548,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas_datareader as web\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 549,
   "metadata": {},
   "outputs": [],
   "source": [
    "tickers = [\"BA\", \"BABA\", \"AAPL\", \"GS\", \"SBUX\", \"MMM\", \"JD\", \"DIS\", \"KO\", \"MSFT\"]\n",
    "\n",
    "#Retrieving the training dataset\n",
    "training_stocks = web.get_data_yahoo(tickers, start = \"2018-11-07\", end = \"2020-03-06\").dropna()\n",
    "\n",
    "#Daily returns\n",
    "training_stock_daily_returns = training_stocks['Adj Close'].pct_change().dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 550,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Symbols\n",
      "BA     -0.000746\n",
      "BABA    0.001075\n",
      "AAPL    0.001216\n",
      "GS     -0.000314\n",
      "SBUX    0.000477\n",
      "MMM    -0.000525\n",
      "JD      0.002076\n",
      "DIS     0.000128\n",
      "KO      0.000527\n",
      "MSFT    0.001300\n",
      "dtype: float64\n",
      "Symbols        BA      BABA      AAPL        GS      SBUX       MMM        JD  \\\n",
      "Symbols                                                                         \n",
      "BA       0.000410  0.000138  0.000198  0.000155  0.000093  0.000119  0.000192   \n",
      "BABA     0.000138  0.000380  0.000239  0.000168  0.000101  0.000132  0.000395   \n",
      "AAPL     0.000198  0.000239  0.000380  0.000207  0.000142  0.000167  0.000320   \n",
      "GS       0.000155  0.000168  0.000207  0.000283  0.000091  0.000147  0.000217   \n",
      "SBUX     0.000093  0.000101  0.000142  0.000091  0.000180  0.000067  0.000152   \n",
      "MMM      0.000119  0.000132  0.000167  0.000147  0.000067  0.000277  0.000202   \n",
      "JD       0.000192  0.000395  0.000320  0.000217  0.000152  0.000202  0.000782   \n",
      "DIS      0.000099  0.000094  0.000130  0.000107  0.000100  0.000077  0.000136   \n",
      "KO       0.000051  0.000039  0.000075  0.000049  0.000064  0.000052  0.000077   \n",
      "MSFT     0.000161  0.000182  0.000232  0.000162  0.000130  0.000114  0.000259   \n",
      "\n",
      "Symbols       DIS        KO      MSFT  \n",
      "Symbols                                \n",
      "BA       0.000099  0.000051  0.000161  \n",
      "BABA     0.000094  0.000039  0.000182  \n",
      "AAPL     0.000130  0.000075  0.000232  \n",
      "GS       0.000107  0.000049  0.000162  \n",
      "SBUX     0.000100  0.000064  0.000130  \n",
      "MMM      0.000077  0.000052  0.000114  \n",
      "JD       0.000136  0.000077  0.000259  \n",
      "DIS      0.000233  0.000052  0.000118  \n",
      "KO       0.000052  0.000140  0.000079  \n",
      "MSFT     0.000118  0.000079  0.000258  \n"
     ]
    }
   ],
   "source": [
    "#Expected daily returns \n",
    "miu = training_stock_daily_returns.mean()\n",
    "print(miu)\n",
    "\n",
    "#Covariance matrix\n",
    "sigma = training_stock_daily_returns.cov()\n",
    "\n",
    "print(sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 551,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sigma^-1\n",
    "sigma_inv = pd.DataFrame(np.linalg.pinv(sigma.values), sigma.columns, sigma.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 552,
   "metadata": {},
   "outputs": [],
   "source": [
    "e = pd.Series([1,1,1,1,1,1,1,1,1,1])\n",
    "e.index = tickers\n",
    "\n",
    "# e transpose\n",
    "e_trans = pd.DataFrame([[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]]).T\n",
    "e_trans.columns = tickers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 553,
   "metadata": {},
   "outputs": [],
   "source": [
    "# c1 is e^T*sigma^-1*e\n",
    "c1=(e_trans.dot(sigma_inv.dot(e))).to_numpy()[0]\n",
    "\n",
    "# c2 is sigma^-1*e\n",
    "c2 = sigma_inv.dot(e)\n",
    "\n",
    "# c3 is sigma^-1*miu\n",
    "c3 = sigma_inv.dot(miu)\n",
    "\n",
    "# c4 is e^T*sigma^-1*miu\n",
    "c4=(e_trans.dot(sigma_inv.dot(miu))).to_numpy()[0]\n",
    "\n",
    "# minimum weight portfolio\n",
    "Wm = c2/c1\n",
    "\n",
    "# zero weight portfolio\n",
    "Wz = c3 - (c4/c1)*c2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 554,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating optimal portfolio weight for different tao values\n",
    "\n",
    "tao = [0, 0.005, 0.01, 0.012, 0.019, 0.023, 0.028, 0.032, 0.039, 0.045, 0.05, 0.055, 0.06, 0.066, 0.07, 0.075, 0.08, 0.086, 0.093, 0.1]\n",
    "\n",
    "Wopt = []\n",
    "\n",
    "# this loop outputs the optimal portfolio weights for each tao value\n",
    "for t in tao:\n",
    "    W = Wz*t + Wm\n",
    "    Wopt.append(W.to_frame())\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 555,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "opt_mius = []\n",
    "\n",
    "opt_vars = []\n",
    "\n",
    "#This loop outputs optimal expected returns and variances based on optimal portfolio weights\n",
    "for w in Wopt:\n",
    "    w_trans = w.T\n",
    "    miu_p = (w_trans.dot(miu)).to_numpy()[0]\n",
    "    var_p = (w_trans.dot(sigma.dot(w))).to_numpy()[0][0]\n",
    "    opt_mius.append(miu_p)\n",
    "    opt_vars.append(var_p)\n",
    "\n",
    "opt_stds = []  \n",
    "\n",
    "#This loop outputs optimal standard deviations based on the optimal variances calculated above\n",
    "for var in opt_vars:\n",
    "    std = var**(0.5) \n",
    "    opt_stds.append(std)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 556,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0005215034908792364\n",
      "0.012601340340584148\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This section draws the efficient frontier\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(opt_stds[0:], opt_mius[0:]) \n",
    "plt.plot(opt_stds[0], opt_mius[0], 'ro') \n",
    "plt.text(opt_stds[0], opt_mius[0], 'min-risk portfolio')\n",
    "\n",
    "\n",
    "plt.xlabel('portfolio std') \n",
    "plt.ylabel('portfolio miu') \n",
    "\n",
    "plt.title('Efficient frontier') \n",
    "\n",
    "# retrieving the training dataset for S&P 500\n",
    "sp500 = web.get_data_yahoo(\"^GSPC\", start=\"2018-11-07\", end = \"2020-03-06\").dropna()\n",
    "\n",
    "# S&P 500's daily returns\n",
    "sp500_daily_returns = sp500['Adj Close'].pct_change().dropna()\n",
    "\n",
    "# Expected daily returns\n",
    "sp_miu = sp500_daily_returns.mean()\n",
    "\n",
    "# Expected daily returns\n",
    "sp_std = sp500_daily_returns.std()\n",
    "\n",
    "\n",
    "plt.plot(sp_std, sp_miu, 'go') \n",
    "plt.text(sp_std, sp_miu, 'S&P 500')\n",
    "\n",
    "\n",
    "# the equal weight vector\n",
    "We = pd.Series([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])\n",
    "We.index = tickers\n",
    "We_trans = We.to_frame().T\n",
    "\n",
    "# Expected return of the equal weight portfolio\n",
    "miu_equal = (We_trans.dot(miu)).to_numpy()[0]\n",
    "\n",
    "print(miu_equal)\n",
    "\n",
    "#standard deviation of the equal weight portfolio\n",
    "std_equal = ((We_trans.dot(sigma.dot(We))).to_numpy()[0])**(0.5)\n",
    "\n",
    "print(std_equal)\n",
    "\n",
    "plt.plot(std_equal, miu_equal, 'bs') \n",
    "plt.text(std_equal, miu_equal, '1/N')\n",
    "\n",
    "# a subset of tao\n",
    "sub_tao = [0.028, 0.039, 0.045, 0.05, 0.06]\n",
    "\n",
    "\n",
    "for t in sub_tao:\n",
    "    W = Wz*t + Wm\n",
    "    W = W.to_frame()\n",
    "    W_trans = W.T\n",
    "    miu_p = (W_trans.dot(miu)).to_numpy()[0]\n",
    "    std_p = ((W_trans.dot(sigma.dot(W))).to_numpy()[0])**(0.5)\n",
    "    plt.plot(std_p, miu_p, \"ys\")\n",
    "    plt.text(std_p, miu_p, \"tao = \"+str(t))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 557,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.056320691519374355\n",
      "0.01867337185461724\n",
      "0.0001967215677034476\n",
      "0.0\n",
      "0.1670042931507818\n",
      "0.039501392504740634\n",
      "0.00044608791224471517\n",
      "0.00027825727692655744\n",
      "                     Table of optimal portfolio's metrics under different tao values\n",
      "tao =  0.028000\texpected return: 0.000721\tstandard dev: 0.010243\t cumulative return: 0.230060\t sharpe ratio: 0.068057\t treynor ratio: 0.000938\t Jensen's alpha: 0.000551\n",
      "tao =  0.039000\texpected return: 0.001016\tstandard dev: 0.011166\t cumulative return: 0.337831\t sharpe ratio: 0.088841\t treynor ratio: 0.001257\t Jensen's alpha: 0.000837\n",
      "tao =  0.045000\texpected return: 0.001177\tstandard dev: 0.011756\t cumulative return: 0.396615\t sharpe ratio: 0.098069\t treynor ratio: 0.001417\t Jensen's alpha: 0.000993\n",
      "tao =  0.050000\texpected return: 0.001311\tstandard dev: 0.012285\t cumulative return: 0.445602\t sharpe ratio: 0.104752\t treynor ratio: 0.001542\t Jensen's alpha: 0.001123\n",
      "tao =  0.060000\texpected return: 0.001579\tstandard dev: 0.013432\t cumulative return: 0.543575\t sharpe ratio: 0.115768\t treynor ratio: 0.001775\t Jensen's alpha: 0.001383\n"
     ]
    }
   ],
   "source": [
    "# This section computes the metrics for S&P 500, equal weight portfolio and the optimal portfolio \n",
    "#  under different tao ratios\n",
    "\n",
    "# Cumulative returns for tickers\n",
    "tick_returns = []\n",
    "for t in tickers:\n",
    "    cumu_return_t = np.product(1+training_stock_daily_returns[t])\n",
    "    tick_returns.append(cumu_return_t)\n",
    "        \n",
    "tick_returns = pd.Series(tick_returns)\n",
    "tick_returns.index = tickers\n",
    "\n",
    "#risk free rate is the 13-week US T-bill rate obtain from the US department of Treasury website\n",
    "rf = 0.000023733\n",
    "\n",
    "\n",
    "# Estimating betas for optimal portfolios via linear regression\n",
    "market_excess_ret = sp500_daily_returns-rf\n",
    "\n",
    "betas = []\n",
    "for t in tickers:\n",
    "    x = np.array([market_excess_ret.tolist(), training_stock_daily_returns[t].to_list()])\n",
    "    r = stats.linregress(x)\n",
    "    betas.append(r.slope)\n",
    "\n",
    "opt_betas = pd.Series(betas)\n",
    "opt_betas.index = tickers\n",
    "    \n",
    "    \n",
    "# Estimating beta for the market portfolio (S&P 500 in this case)\n",
    "market_excess_ret = sp500_daily_returns-rf\n",
    "\n",
    "x = np.array([market_excess_ret.tolist(), sp500_daily_returns.to_list()])\n",
    "sp_beta = stats.linregress(x).slope\n",
    "\n",
    "# beta for the equal weight portfolio\n",
    "equal_beta = 0.1*sum(betas)\n",
    "\n",
    "\n",
    "        \n",
    "# S&P 500 cumulative returns  \n",
    "sp_cumu = np.product(1+sp500_daily_returns)-1\n",
    "\n",
    "print(sp_cumu)\n",
    "\n",
    "# S&P 500 sharpe ratio\n",
    "sp_sharpe = (sp_miu-rf)/sp_std\n",
    "\n",
    "print(sp_sharpe)\n",
    "\n",
    "# S&P 500 Traynor Ratio \n",
    "sp_treynor = (sp_miu-rf)/sp_beta\n",
    "\n",
    "print(sp_treynor)\n",
    "\n",
    "# S&P 500 Jensen's Alpha \n",
    "sp_jen_alpha = (sp_miu-rf)-sp_beta*((sp_miu-rf))\n",
    "\n",
    "print(sp_jen_alpha)\n",
    "\n",
    "# equal weight cumulative returns\n",
    "equal_cumu = We.dot(tick_returns)-1\n",
    "\n",
    "print(equal_cumu)\n",
    "\n",
    "equal_sharpe = (miu_equal-rf)/std_equal\n",
    "\n",
    "print(equal_sharpe)\n",
    "\n",
    "equal_treynor = (miu_equal-rf)/equal_beta\n",
    "\n",
    "print(equal_treynor)\n",
    "\n",
    "equal_jen_alpha = (miu_equal-rf)-equal_beta*((sp_miu-rf))\n",
    "\n",
    "print(equal_jen_alpha)\n",
    "\n",
    "\n",
    "# this section prints out the table results foroptimal portfolio's metrics under different tao values\n",
    "\n",
    "print(\"                     Table of optimal portfolio's metrics under different tao values\")\n",
    "for t in sub_tao:\n",
    "    W = Wz*t + Wm\n",
    "    W_trans = W.T\n",
    "    miu_p = W_trans.dot(miu)\n",
    "    std_p = ((W_trans.dot(sigma.dot(W))))**(0.5)\n",
    "    total_cumu = W_trans.dot(tick_returns)-1\n",
    "    sharpe = (miu_p-rf)/std_p\n",
    "    beta_p = W_trans.dot(opt_betas)\n",
    "    treynor = (miu_p - rf)/beta_p\n",
    "    Jensen = (miu_p-rf)-beta_p*(sp_miu-rf)\n",
    "    print(\"tao =  %f\\texpected return: %f\\tstandard dev: %f\\t cumulative return: %f\\t sharpe ratio: %f\\t treynor ratio: %f\\t Jensen's alpha: %f\" \n",
    "              % (t, miu_p, std_p, total_cumu, sharpe, treynor, Jensen))\n",
    "    \n",
    "            \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 558,
   "metadata": {},
   "outputs": [],
   "source": [
    "############################### Below is part (e), running on the test dataset #############################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 559,
   "metadata": {},
   "outputs": [],
   "source": [
    "tickers = [\"BA\", \"BABA\", \"AAPL\", \"GS\", \"SBUX\", \"MMM\", \"JD\", \"DIS\", \"KO\", \"MSFT\"]\n",
    "\n",
    "#Retrieving the testing dataset\n",
    "training_stocks = web.get_data_yahoo(tickers, start = \"2020-03-09\", end = \"2020-11-06\").dropna()\n",
    "\n",
    "#Daily returns\n",
    "training_stock_daily_returns = training_stocks['Adj Close'].pct_change().dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 560,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Symbols\n",
      "BA     -0.000180\n",
      "BABA    0.002782\n",
      "AAPL    0.003995\n",
      "GS      0.001640\n",
      "SBUX    0.002039\n",
      "MMM     0.001172\n",
      "JD      0.005397\n",
      "DIS     0.001677\n",
      "KO      0.000156\n",
      "MSFT    0.002820\n",
      "dtype: float64\n",
      "Symbols        BA      BABA      AAPL        GS      SBUX       MMM        JD  \\\n",
      "Symbols                                                                         \n",
      "BA       0.003943  0.000623  0.000956  0.001560  0.001367  0.000860  0.000684   \n",
      "BABA     0.000623  0.000655  0.000471  0.000438  0.000414  0.000261  0.000546   \n",
      "AAPL     0.000956  0.000471  0.001004  0.000735  0.000683  0.000454  0.000592   \n",
      "GS       0.001560  0.000438  0.000735  0.001355  0.000970  0.000717  0.000466   \n",
      "SBUX     0.001367  0.000414  0.000683  0.000970  0.001046  0.000609  0.000467   \n",
      "MMM      0.000860  0.000261  0.000454  0.000717  0.000609  0.000669  0.000292   \n",
      "JD       0.000684  0.000546  0.000592  0.000466  0.000467  0.000292  0.000888   \n",
      "DIS      0.001316  0.000379  0.000595  0.000912  0.000810  0.000602  0.000430   \n",
      "KO       0.000962  0.000253  0.000431  0.000612  0.000517  0.000458  0.000276   \n",
      "MSFT     0.000919  0.000476  0.000818  0.000748  0.000719  0.000451  0.000592   \n",
      "\n",
      "Symbols       DIS        KO      MSFT  \n",
      "Symbols                                \n",
      "BA       0.001316  0.000962  0.000919  \n",
      "BABA     0.000379  0.000253  0.000476  \n",
      "AAPL     0.000595  0.000431  0.000818  \n",
      "GS       0.000912  0.000612  0.000748  \n",
      "SBUX     0.000810  0.000517  0.000719  \n",
      "MMM      0.000602  0.000458  0.000451  \n",
      "JD       0.000430  0.000276  0.000592  \n",
      "DIS      0.001009  0.000516  0.000630  \n",
      "KO       0.000516  0.000565  0.000444  \n",
      "MSFT     0.000630  0.000444  0.000923  \n"
     ]
    }
   ],
   "source": [
    "#Expected daily returns \n",
    "miu = training_stock_daily_returns.mean()\n",
    "print(miu)\n",
    "\n",
    "#Covariance matrix\n",
    "sigma = training_stock_daily_returns.cov()\n",
    "print(sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 561,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sigma^-1\n",
    "sigma_inv = pd.DataFrame(np.linalg.pinv(sigma.values), sigma.columns, sigma.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 562,
   "metadata": {},
   "outputs": [],
   "source": [
    "e = pd.Series([1,1,1,1,1,1,1,1,1,1])\n",
    "e.index = tickers\n",
    "\n",
    "# e transpose\n",
    "e_trans = pd.DataFrame([[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]]).T\n",
    "e_trans.columns = tickers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 563,
   "metadata": {},
   "outputs": [],
   "source": [
    "# c1 is e^T*sigma^-1*e\n",
    "c1=(e_trans.dot(sigma_inv.dot(e))).to_numpy()[0]\n",
    "\n",
    "# c2 is sigma^-1*e\n",
    "c2 = sigma_inv.dot(e)\n",
    "\n",
    "# c3 is sigma^-1*miu\n",
    "c3 = sigma_inv.dot(miu)\n",
    "\n",
    "# c4 is e^T*sigma^-1*miu\n",
    "c4=(e_trans.dot(sigma_inv.dot(miu))).to_numpy()[0]\n",
    "\n",
    "# minimum weight portfolio\n",
    "Wm = c2/c1\n",
    "\n",
    "# zero weight portfolio\n",
    "Wz = c3 - (c4/c1)*c2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 564,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating optimal portfolio weight for different tao values\n",
    "\n",
    "tao = [0, 0.005, 0.01, 0.012, 0.019, 0.023, 0.028, 0.032, 0.039, 0.045, 0.05, 0.055, 0.06, 0.066, 0.07, 0.075, 0.08, 0.086, 0.093, 0.1]\n",
    "\n",
    "Wopt = []\n",
    "\n",
    "# this loop outputs the optimal portfolio weights for each tao value\n",
    "for t in tao:\n",
    "    W = Wz*t + Wm\n",
    "    Wopt.append(W.to_frame())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 565,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "opt_mius = []\n",
    "\n",
    "opt_vars = []\n",
    "\n",
    "#This loop outputs optimal expected returns and variances based on optimal portfolio weights\n",
    "for w in Wopt:\n",
    "    w_trans = w.T\n",
    "    miu_p = (w_trans.dot(miu)).to_numpy()[0]\n",
    "    var_p = (w_trans.dot(sigma.dot(w))).to_numpy()[0][0]\n",
    "    opt_mius.append(miu_p)\n",
    "    opt_vars.append(var_p)\n",
    "\n",
    "opt_stds = []  \n",
    "\n",
    "#This loop outputs optimal standard deviations based on the optimal variances calculated above\n",
    "for var in opt_vars:\n",
    "    std = var**(0.5) \n",
    "    opt_stds.append(std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 566,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0017353329511433234\n",
      "0.02415145724591063\n",
      "0.0021497968094129857\n",
      "0.02647966215414571\n"
     ]
    }
   ],
   "source": [
    "sp500 = web.get_data_yahoo(\"^GSPC\", start = \"2020-03-09\", end = \"2020-11-06\").dropna()\n",
    "\n",
    "# S&P 500's daily returns\n",
    "sp500_daily_returns = sp500['Adj Close'].pct_change().dropna()\n",
    "\n",
    "# Expected daily returns\n",
    "sp_miu = sp500_daily_returns.mean()\n",
    "\n",
    "print(sp_miu)\n",
    "\n",
    "# Expected daily returns\n",
    "sp_std = sp500_daily_returns.std()\n",
    "\n",
    "print(sp_std)\n",
    "\n",
    "# the equal weight vector\n",
    "We = pd.Series([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])\n",
    "We.index = tickers\n",
    "We_trans = We.to_frame().T\n",
    "\n",
    "# Expected return of the equal weight portfolio\n",
    "miu_equal = (We_trans.dot(miu)).to_numpy()[0]\n",
    "\n",
    "print(miu_equal)\n",
    "\n",
    "#standard deviation of the equal weight portfolio\n",
    "std_equal = ((We_trans.dot(sigma.dot(We))).to_numpy()[0])**(0.5)\n",
    "\n",
    "print(std_equal)\n",
    "\n",
    "# a subset of tao\n",
    "sub_tao = [0.028, 0.039, 0.045, 0.05, 0.06]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 546,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2777583109553772\n",
      "0.0708694276173805\n",
      "0.0017115999511433226\n",
      "-8.673617379884035e-19\n",
      "0.3658171669076711\n",
      "0.08029044317244526\n",
      "0.0020249576405811823\n",
      "0.0003290036441077819\n",
      "                     Table of optimal portfolio's metrics under different tao values\n",
      "tao =  0.028000\texpected return: 0.002743\tstandard dev: 0.019362\t cumulative return: 0.625748\t sharpe ratio: 0.140468\t treynor ratio: 0.004878\t Jensen's alpha: 0.001765\n",
      "tao =  0.039000\texpected return: 0.003171\tstandard dev: 0.020088\t cumulative return: 0.735809\t sharpe ratio: 0.156683\t treynor ratio: 0.005594\t Jensen's alpha: 0.002184\n",
      "tao =  0.045000\texpected return: 0.003405\tstandard dev: 0.020570\t cumulative return: 0.795842\t sharpe ratio: 0.164355\t treynor ratio: 0.005978\t Jensen's alpha: 0.002413\n",
      "tao =  0.050000\texpected return: 0.003599\tstandard dev: 0.021015\t cumulative return: 0.845869\t sharpe ratio: 0.170134\t treynor ratio: 0.006296\t Jensen's alpha: 0.002603\n",
      "tao =  0.060000\texpected return: 0.003988\tstandard dev: 0.022009\t cumulative return: 0.945924\t sharpe ratio: 0.180118\t treynor ratio: 0.006924\t Jensen's alpha: 0.002984\n"
     ]
    }
   ],
   "source": [
    "# This section computes the metrics for S&P 500, equal weight portfolio and the optimal portfolio \n",
    "#  under different tao ratios\n",
    "\n",
    "# Cumulative returns for tickers\n",
    "tick_returns = []\n",
    "for t in tickers:\n",
    "    cumu_return_t = np.product(1+training_stock_daily_returns[t])\n",
    "    tick_returns.append(cumu_return_t)\n",
    "        \n",
    "tick_returns = pd.Series(tick_returns)\n",
    "tick_returns.index = tickers\n",
    "\n",
    "#risk free rate is the 13-week US T-bill rate obtain from the US department of Treasury website\n",
    "rf = 0.000023733\n",
    "\n",
    "\n",
    "# Estimating betas for optimal portfolios via linear regression\n",
    "market_excess_ret = sp500_daily_returns-rf\n",
    "\n",
    "betas = []\n",
    "for t in tickers:\n",
    "    x = np.array([market_excess_ret.tolist(), training_stock_daily_returns[t].to_list()])\n",
    "    r = stats.linregress(x)\n",
    "    betas.append(r.slope)\n",
    "\n",
    "opt_betas = pd.Series(betas)\n",
    "opt_betas.index = tickers\n",
    "    \n",
    "    \n",
    "# Estimating beta for the market portfolio (S&P 500 in this case)\n",
    "market_excess_ret = sp500_daily_returns-rf\n",
    "\n",
    "x = np.array([market_excess_ret.tolist(), sp500_daily_returns.to_list()])\n",
    "sp_beta = stats.linregress(x).slope\n",
    "\n",
    "# beta for the equal weight portfolio\n",
    "equal_beta = 0.1*sum(betas)\n",
    "\n",
    "\n",
    "        \n",
    "# S&P 500 cumulative returns  \n",
    "sp_cumu = np.product(1+sp500_daily_returns)-1\n",
    "\n",
    "print(sp_cumu)\n",
    "\n",
    "# S&P 500 sharpe ratio\n",
    "sp_sharpe = (sp_miu-rf)/sp_std\n",
    "\n",
    "print(sp_sharpe)\n",
    "\n",
    "# S&P 500 Traynor Ratio \n",
    "sp_treynor = (sp_miu-rf)/sp_beta\n",
    "\n",
    "print(sp_treynor)\n",
    "\n",
    "# S&P 500 Jensen's Alpha \n",
    "sp_jen_alpha = (sp_miu-rf)-sp_beta*((sp_miu-rf))\n",
    "\n",
    "print(sp_jen_alpha)\n",
    "\n",
    "# equal weight cumulative returns\n",
    "equal_cumu = We.dot(tick_returns)-1\n",
    "\n",
    "print(equal_cumu)\n",
    "\n",
    "equal_sharpe = (miu_equal-rf)/std_equal\n",
    "\n",
    "print(equal_sharpe)\n",
    "\n",
    "equal_treynor = (miu_equal-rf)/equal_beta\n",
    "\n",
    "print(equal_treynor)\n",
    "\n",
    "equal_jen_alpha = (miu_equal-rf)-equal_beta*((sp_miu-rf))\n",
    "\n",
    "print(equal_jen_alpha)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# this section prints out the table results foroptimal portfolio's metrics under different tao values\n",
    "\n",
    "print(\"                 Table of optimal portfolio's metrics under different tao values\")\n",
    "for t in sub_tao:\n",
    "    W = Wz*t + Wm\n",
    "    W_trans = W.T\n",
    "    miu_p = W_trans.dot(miu)\n",
    "    std_p = ((W_trans.dot(sigma.dot(W))))**(0.5)\n",
    "    total_cumu = W_trans.dot(tick_returns)-1\n",
    "    sharpe = (miu_p-rf)/std_p\n",
    "    beta_p = W_trans.dot(opt_betas)\n",
    "    treynor = (miu_p - rf)/beta_p\n",
    "    Jensen = (miu_p-rf)-beta_p*(sp_miu-rf)\n",
    "    print(\"tao =  %f\\texpected return: %f\\tstandard dev: %f\\t cumulative return: %f\\t sharpe ratio: %f\\t treynor ratio: %f\\t Jensen's alpha: %f\" \n",
    "              % (t, miu_p, std_p, total_cumu, sharpe, treynor, Jensen))\n",
    "    \n",
    "            \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
